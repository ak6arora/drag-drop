{"version":3,"sources":["ItemTypes.js","Card.jsx","example.jsx","index.js"],"names":["ItemTypes","style","border","padding","margin","backgroundColor","cursor","Card","_ref","id","text","index","moveCard","ref","useRef","_useDrop","useDrop","accept","hover","item","monitor","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","Object","slicedToArray","_useDrag","useDrag","type","collect","isDragging","_useDrag2","opacity","drag","react_default","a","createElement","objectSpread","Container","_useState","useState","_useState2","cards","setCards","useCallback","dragCard","update","$splice","Fragment","className","map","card","i","src_Card","key","renderCard","rootElement","document","getElementById","ReactDOM","render","backend","documentElement","TouchBackend","HTML5Backend","esm","example"],"mappings":"oNAAeA,EACP,OCEFC,EAAQ,CACZC,OAAQ,kBACRC,QAAS,cACTC,OAAQ,iBACRC,gBAAiB,QACjBC,OAAQ,QA2DKC,EAzDF,SAAAC,GAAmC,IAAhCC,EAAgCD,EAAhCC,GAAIC,EAA4BF,EAA5BE,KAAMC,EAAsBH,EAAtBG,MAAOC,EAAeJ,EAAfI,SACzBC,EAAMC,iBAAO,MAD2BC,EAE7BC,YAAQ,CACvBC,OAAQjB,EACRkB,MAFuB,SAEjBC,EAAMC,GACV,GAAKP,EAAIQ,QAAT,CAGA,IAAMC,EAAYH,EAAKR,MACjBY,EAAaZ,EAEnB,GAAIW,IAAcC,EAAlB,CAIA,IAAMC,EAAoBX,EAAIQ,QAAQI,wBAEhCC,GACHF,EAAkBG,OAASH,EAAkBI,KAAO,EAIjDC,EAFeT,EAAQU,kBAEKC,EAAIP,EAAkBI,IAKpDN,EAAYC,GAAcM,EAAeH,GAIzCJ,EAAYC,GAAcM,EAAeH,IAI7Cd,EAASU,EAAWC,GAKpBJ,EAAKR,MAAQY,QAtCRS,EAFqCC,OAAAC,EAAA,EAAAD,CAAAlB,EAAA,MAAAoB,EA2CfC,YAAQ,CACrCjB,KAAM,CAAEkB,KAAMrC,EAAgBS,KAAIE,SAClC2B,QAAS,SAAAlB,GAAO,MAAK,CACnBmB,WAAYnB,EAAQmB,iBA9CsBC,EAAAP,OAAAC,EAAA,EAAAD,CAAAE,EAAA,GAiDxCM,EAjDwCD,EAAA,GA2CrCD,WAMoB,EAAI,EAEjC,OADAG,EAlD8CF,EAAA,IAkDzCR,EAAKnB,IAER8B,EAAAC,EAAAC,cAAA,OAAKhC,IAAKA,EAAKZ,MAAKgC,OAAAa,EAAA,EAAAb,CAAA,GAAOhC,EAAP,CAAcwC,aAC/B/B,qBCEQqC,SA7DG,WAChB,IAAAC,EAC4BC,mBAAS,CACjC,CACExC,GAAI,EACJC,KAAM,QAER,CACED,GAAI,EACJC,KAAM,OAER,CACED,GAAI,EACJC,KAAM,WAER,CACED,GAAI,EACJC,KAAM,cAER,CACED,GAAI,EACJC,KACE,UAEJ,CACED,GAAI,EACJC,KAAM,aAzBZwC,EAAAjB,OAAAC,EAAA,EAAAD,CAAAe,EAAA,GACSG,EADTD,EAAA,GACgBE,EADhBF,EAAA,GA4BQtC,EAAWyC,sBACf,SAAC/B,EAAWC,GACV,IAAM+B,EAAWH,EAAM7B,GACvB8B,EACEG,IAAOJ,EAAO,CACZK,QAAS,CACP,CAAClC,EAAW,GACZ,CAACC,EAAY,EAAG+B,QAKxB,CAACH,IAaH,OACER,EAAAC,EAAAC,cAAAF,EAAAC,EAAAa,SAAA,KACEd,EAAAC,EAAAC,cAAA,OAAKa,UAAU,aAAaP,EAAMQ,IAAI,SAACC,EAAMC,GAAP,OAbvB,SAACD,EAAMjD,GACxB,OACEgC,EAAAC,EAAAC,cAACiB,EAAD,CACEC,IAAKH,EAAKnD,GACVE,MAAOA,EACPF,GAAImD,EAAKnD,GACTC,KAAMkD,EAAKlD,KACXE,SAAUA,IAMuCoD,CAAWJ,EAAMC,yBCxC3E,IAAMI,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO1B,EAAAC,EAAAC,cAZhB,WACC,IAAMyB,EAAW,iBAAkBJ,SAASK,gBAAmBC,IAAeC,IAC9E,OACC9B,EAAAC,EAAAC,cAAA,OAAKa,UAAU,OACdf,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAaJ,QAASA,GACrB3B,EAAAC,EAAAC,cAAC8B,EAAD,SAOY,MAASV","file":"static/js/main.6d4040df.chunk.js","sourcesContent":["export default {\n  CARD: 'card',\n}\n","import React, { useRef } from 'react'\nimport { useDrag, useDrop } from 'react-dnd'\nimport ItemTypes from './ItemTypes'\nconst style = {\n  border: '1px dashed gray',\n  padding: '0.5rem 1rem',\n  margin: '0 .5rem 1rem 0',\n  backgroundColor: 'white',\n  cursor: 'move',\n}\nconst Card = ({ id, text, index, moveCard }) => {\n  const ref = useRef(null)\n  const [, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    hover(item, monitor) {\n      if (!ref.current) {\n        return\n      }\n      const dragIndex = item.index\n      const hoverIndex = index\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current.getBoundingClientRect()\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset()\n      // Get pixels to the top\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return\n      }\n      // Time to actually perform the action\n      moveCard(dragIndex, hoverIndex)\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex\n    },\n  })\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: ItemTypes.CARD, id, index },\n    collect: monitor => ({\n      isDragging: monitor.isDragging(),\n    }),\n  })\n  const opacity = isDragging ? 0 : 1\n  drag(drop(ref))\n  return (\n    <div ref={ref} style={{ ...style, opacity }}>\n      {text}\n    </div>\n  )\n}\nexport default Card\n","import React, { useState, useCallback } from 'react'\nimport Card from './Card'\nimport update from 'immutability-helper'\nimport  \"./app.css\";\nconst Container = () => {\n  {\n    const [cards, setCards] = useState([\n      {\n        id: 1,\n        text: 'Java',\n      },\n      {\n        id: 2,\n        text: 'C++',\n      },\n      {\n        id: 3,\n        text: 'ASP.NET',\n      },\n      {\n        id: 4,\n        text: 'Javascript',\n      },\n      {\n        id: 5,\n        text:\n          'Python',\n      },\n      {\n        id: 6,\n        text: 'Node.js'\n      }\n    ])\n    const moveCard = useCallback(\n      (dragIndex, hoverIndex) => {\n        const dragCard = cards[dragIndex]\n        setCards(\n          update(cards, {\n            $splice: [\n              [dragIndex, 1],\n              [hoverIndex, 0, dragCard],\n            ],\n          }),\n        )\n      },\n      [cards],\n    )\n    const renderCard = (card, index) => {\n      return (\n        <Card\n          key={card.id}\n          index={index}\n          id={card.id}\n          text={card.text}\n          moveCard={moveCard}\n        />\n      )\n    }\n    return (\n      <>\n        <div className=\"container\">{cards.map((card, i) => renderCard(card, i))}</div>\n      </>\n    )\n  }\n}\nexport default Container\n","\n\timport React from 'react'\n\timport ReactDOM from 'react-dom'\n\timport Example from './example'\n\timport { DndProvider } from 'react-dnd'\n\timport HTML5Backend from 'react-dnd-html5-backend'\n\timport TouchBackend from 'react-dnd-touch-backend'\n\n\t\n\tfunction App() {\n\t\tconst backend = (\"ontouchstart\" in document.documentElement) ? TouchBackend : HTML5Backend;\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<DndProvider backend={backend}>\n\t\t\t\t\t<Example />\n\t\t\t\t</DndProvider>\n\t\t\t</div>\n\t\t)\n\t}\n\n\tconst rootElement = document.getElementById('root')\n\tReactDOM.render(<App />, rootElement)\n"],"sourceRoot":""}